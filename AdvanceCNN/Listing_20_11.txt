# Save augmented images to file
from keras.datasets import mnist
from keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import os

# Load data,l
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Reshape to be [samples][height][width][channels]
X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)

# Convert from int to float
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

# Define data preparation
datagen = ImageDataGenerator() #Without any preprocessing
#datagen = ImageDataGenerator(horizontal_flip=True, vertical_flip=True) #Apply flipping

# Fit parameters from data (not needed for saving, but required by flow method)
datagen.fit(X_train)

# Create directory if it doesn't exist
save_dir = 'D:\\images'
os.makedirs(save_dir, exist_ok=True) #The exist_ok=True ensures that the directory is created if it doesn't already exist

# Configure batch size and save augmented images to file
for X_batch, y_batch in datagen.flow(X_train, y_train, batch_size=9, shuffle=False, save_to_dir=save_dir, save_prefix='aug', save_format='png'):
    #Each image will have a filename starting with 'aug' followed by a numerical index indicating its position in the batch.
    # Create a grid of 3x3 images
     # create a grid of 3x3 images
    for i in range(0, 9):
        pyplot.subplot(330 + 1 + i)
        pyplot.imshow(X_batch[i].reshape(28, 28), cmap=pyplot.get_cmap( 'gray' ))
    # show the plot
    pyplot.show()
    break
